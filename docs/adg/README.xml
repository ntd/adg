<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                         "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="README">
<title>ADG overview</title>
<subtitle>How to get start with ADG</subtitle>

<simplesect id="README.general">
<title>General information</title>

<para>Automatic Drawing Generation is GObject-based library that provides
a non-interactive cairo canvas specifically designed for generating
technical drawings. It can be viewed as a 2D CAD without user
interface.</para>

<para>If you want to develop an application that needs to show and print
drawings where some data change but the overall design is similar,
the ADG library can be quite useful. In manufacturing industries
this is often the case and an ADG-based application could help to
greatly improve the productivity of technical offices.</para>

<para>You could reach similar targets using parametric CADs but a custom
application provides the following benefits:</para>

<itemizedlist>
   <listitem>more customizable;</listitem>
   <listitem>quicker and not so bloated as a parametric CAD;</listitem>
   <listitem>can be easily connected to a database;</listitem>
   <listitem>an ADG based filter can generate drawing on-fly: this feature
   could be used in web-based applications.</listitem>
</itemizedlist>

<para>Visit the <ulink url="https://adg.entidi.com/">ADG web site</ulink> for further
details.</para>

</simplesect>

<simplesect id="README.design">
<title>Design overview</title>

<para>The project is based on the <ulink url="https://www.gtk.org/">GObject</ulink> library:
the ADG canvas is developed in plain C using an object-oriented
approach. Applications based on ADG are not expected to be
developed in C, though: the basic idea is to have a set of bindings
for higher level languages (the garbage-collected ones, above all).
An application can then be developed using any specific language
available, much in the same way as <ulink url="https://www.gnome.org/">GNOME</ulink>
applications are conceived.</para>

<para>Lua bindings based on <ulink url="https://github.com/lgi-devs/lgi">LGI</ulink> are
already availables and effectively used upstream to test the APIs.
The <ulink url="https://github.com/ntd/adg-lua">adg-lua</ulink> project provides code
examples on how to use them.</para>

<para>The mathematical and geometrical algorithms, together with a bunch
of other useful functions for manipulating cairo paths, are kept
in a separated library called <code>CPML</code> (Cairo Path Manipulation Library).
Although actually embedded into the ADG project, this library can be
easily splitted on its own, if needed.</para>

<para>The rendering leverages <ulink url="https://www.cairographics.org/">cairo</ulink>, so
the ADG canvas fully shares strong and weak points of that library.
Most notably, the availables export formats include PostScript, SVG,
PDF, PNG but no CAD specific ones (such as DXF).</para>
</simplesect>


<simplesect id="README.dependencies">
<title>External dependencies</title>

<para>The ADG library has the following dependencies:</para>

<itemizedlist>
   <listitem><ulink url="https://www.cairographics.org/">cairo</ulink> 1.7.4 or later, required
   by both CPML and ADG;</listitem>
   <listitem><ulink url="https://www.gtk.org/">GLib</ulink> 2.38.0 or later, required by ADG;</listitem>
   <listitem><ulink url="https://www.gtk.org/">GTK</ulink> 3.0.0 or later (or GTK+ 2.18.0 or
   later for GTK2 support) to optionally include GTK support and build
   the <command>adg-demo</command> program;</listitem>
   <listitem><ulink url="https://pango.gnome.org/">pango</ulink> 1.10.0 or later (optional) to
   support a serious engine for rendering text instead of using the
   cairo "toy" APIs (only the <code>pango-cairo</code> module will be used);</listitem>
   <listitem><ulink url="https://wiki.gnome.org/DocumentationProject/GtkDoc">gtk-doc</ulink> 1.12
   or later (optional), used to regenerate the API documentation;</listitem>
   <listitem><ulink url="https://gi.readthedocs.io/">GObject introspection</ulink> 1.0.0 or later
   (optional) to dinamically generate bindings metadata.</listitem>
</itemizedlist>

<para>The required packages must be installed prior the ADG building:
they should be availables on nearly every decent unix-like system.</para>

<para>The ADG is mainly developed on GNU/Linux but its dependecies are
known to be cross platform so a porting should be quite easy, if
not automatic.</para></simplesect>


<simplesect id="README.installation">
<title>Installation</title>

<para>The ADG build system is based on meson but a legacy autotools based
system is still supported.</para>

<para>The following instructions are included only for reference: you are
free to install ADG in the way you prefer. Just remember (if you
are copying and pasting) to put the proper package version instead
of the <code>0.9.4</code> placeholder used in the examples.</para>

<orderedlist>
   <listitem>Unpack the ADG tarball somewhere in your file system: your home
   folder is a good candidate. You can get the latest tarball directly
   from <ulink url="https://github.com/ntd/adg/releases">GitHub</ulink>.
<programlisting>cd $HOME
wget https://github.com/ntd/adg/releases/download/0.9.4/adg-0.9.4.tar.bz2
tar xjvf adg-0.9.4.tar.bz2
cd adg-0.9.4</programlisting></listitem>
   <listitem>Configure and run the build using autotools or the meson system
   (the latter only available on adg >= 0.9.4). The autotools build
   system will be dropped somewhere in the future.
<programlisting># Using autotools (VPATH build)
mkdir build &amp;&amp; cd build
../configure
make
# Using meson
meson build
cd build
ninja</programlisting></listitem>
   <listitem>Once the building has finished, you are able to run the demo
   program without installing anything. Just try it out by
   launching the uninstalled executable:
<programlisting>demo/adg-demo</programlisting></listitem>
   <listitem>Install the library. You must usually have root privileges if you
   intend to install the library on your system folders.
<programlisting># Using autotools
make install
# Using meson
ninja intall</programlisting></listitem></orderedlist></simplesect>

</chapter>
